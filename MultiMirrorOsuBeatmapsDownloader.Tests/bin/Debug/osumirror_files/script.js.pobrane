Array.prototype.unique = function()
{
    return this.filter(function(val, idx, self)
    {
        return self.indexOf(val) === idx;
    });
};
function precisionRound(number, precision) {
    var factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
}

$('[id^=toggle-]').prop('checked', false);
    function initUploader()
    {
        if (typeof search === 'undefined' || !(search.p.value <= 1 && search.s.value === '' && search.m.value === ''))
        {
            return false;
        }
        $('.sets').html('');
        $.ajax({
            url: 'custom.php?mod=add',
            data: {
                id: search.q.value,
                m: search.c.value
            }
        }).done(function(e) {
            e = $(e);
            $('.sets').append(e);
            e.fadeIn(300, function() {
                var target = $('.account', this);
                var progress = $('progress', this);
                function log(str) {
                    $('.details', target.parent()).append(str + '\n').scrollTop(function() {
                        return this.scrollHeight - $(this).height();
                    });
                }
                if(!('WebSocket' in window)) {
                    log('You must use a modern browser which has WebSocket API!');
                    $('input, button', target).prop('disabled', true);
                }
                else {
                    log('Connecting server...');
                    var ws = new WebSocket(location.protocol.replace('http', 'ws') + '//www.bloodcat.com/osu/');
                    ws.onclose = function(e) {
                        log('Error: Connection closed by server.');
                        console.log(e);
                    };
                    ws.Send = function(action, data) {
                        if(ws.readyState == 3) {
                            $('.beatmap.e:not(.d) .add').click();
                            return;
                        }
                        ws.send(JSON.stringify({action: action, data: data}));
                    };
                    ws.onopen = function() {
                        log('Connection established.');
                        var sid = localStorage['osu_sid'];
                        if(sid) {
                            log('Login with saved session...');
                            $('input, button', target).prop('disabled', true);
                            ws.Send('login', {sid: sid});
                        }
                    };
                    var totalSize = 0;
                    ws.onmessage = function(message) {
                        var response = JSON.parse(message.data);
                        var data = response.data;
                        switch(response.action) {
                            case 'error':
                                log('Error: Too many requests. Try later.');
                                $('input, button', target).prop('disabled', false);
                                progress.attr('value', 0);
                                break;
                            case 'login':
                                if(data.error) {
                                    log('Error: Session expired or wrong username/password.');
                                    $('input', target).prop('disabled', false);
                                    localStorage.removeItem('osu_sid');
                                }
                                else {
                                    log('Logged as ' + data.name + '.');
                                    target.addClass('l')
                                        .find('img').attr('src', '//osu.ppy.sh/a/' + data.id).end()
                                        .find('span').text(data.name).end();
                                    localStorage['osu_sid'] = data.sid;
                                }
                                $('button', target).prop('disabled', false);
                                break;
                            case 'upload':
                                switch(data.state) {
                                    case 'fetching': log('Fetching base information...'); break;
                                    case 'rejected':
                                        var msg = 'Rejected: ';
                                        switch(data.detail) {
                                            case 'exists':
                                                msg += 'Already exists';
                                                setTimeout(function() {
                                                    progress.removeAttr('max');
                                                    location.reload();
                                                }, 3000);
                                                break;
                                            case 'troll': msg += 'Creator ID missmatch.'; break;
                                            case 'nomap': msg += 'Beatmap deleted.'; break;
                                            case 'favorite': msg += 'At least 2 favorites needed.'; break;
                                        }
                                        log(msg);
                                        $('input, button', target).prop('disabled', false);
                                        progress.attr('value', 0);
                                        break;
                                    case 'reserved':
                                        log('Complete: Added to the download list.');
                                        $('input, button', target).prop('disabled', false);
                                        progress.attr('value', 0);
                                        break;
                                    case 'download':
                                        totalSize = data.total;
                                        log('Download started. Total ' + totalSize + ' bytes.');
                                        progress.attr({
                                            max: totalSize,
                                            value: 0
                                        });
                                        break;
                                    case 'downloading':
                                        log('Received: ' + data.got + ' of ' + totalSize + ' bytes (' + (data.got / totalSize * 100).toFixed(2) + '%)');
                                        progress.attr('value', data.got);
                                        break;
                                    case 'wait':
                                        log('Wait for ' + data.time + ' seconds...');
                                        progress.removeAttr('value');
                                        break;
                                    case 'failed':
                                        log('This beatmap hasn\'t been uploaded correctly!');
                                        $('input, button', target).prop('disabled', false);
                                        progress.attr('value', 0);
                                        break;
                                    case 'downloaded':
                                        log('Download finished.');
                                        progress.attr('value', function() {
                                            return this.max;
                                        });
                                        log('Registering...');
                                        break;
                                    case 'finished':
                                        log('Complete: Thank you for uploading non-exist beatmap.');
                                        log(data.output);
                                        log('Page will be refreshed in 3 seconds.');
                                        progress.removeAttr('value');
                                        setTimeout(function() {
                                            progress.removeAttr('max');
                                            history.replaceState(null, null);
                                            $('#search').submit();
                                        }, 3000);
                                        break;
                                }
                                break;
                        }
                    }

                    $(target).on('submit', function(e) {
                        e.preventDefault();
                        if(!$(this).hasClass('l')) {
                            log('Login with entered credentials...');
                            $('input, button', this).prop('disabled', true);
                            ws.Send('login', {id: this.id.value, pw: this.pw.value});
                        }
                        else {
                            log('Logout.');
                            $(this).removeClass('l').find('input').prop('disabled', false).end()[0].reset();
                            localStorage.removeItem('osu_sid');
                            ws.Send('logout', null);
                        }
                    });

                    $(progress).on('click', function() {
                        if(!$(this).attr('max') && $(this).attr('value')) {
                            $(this).removeAttr('value');
                            log('Upload started.');
                            $('input, button', target).prop('disabled', false);
                            ws.Send('upload', {id: $(this).parent().css('background-image').match(/\d+/)[0]});
                        }
                        else {
                            alert('Working!');
                        }
                    });

                    window.onbeforeunload = function() {
                        if(progress.attr('max')) {
                            return 'You have to go..? u.u\nBut don\'t worry!\nUpload will work in background until it\'s finished.';
                        }
                    }
                }
            });
        });
        return true;
    }


var spinner = new Spinner({color: '#fff', lines: 9, length: 4, width: 3, radius: 8, corners: 0, trail: 60, direction: 1});
$(document).ajaxStart(function() {
    spinner.spin();
    $('#logo').css('visibility', 'hidden').parent().append($(spinner.el).css({position: 'fixed', top: '20px', left: '20px'}));
}).ajaxStop(function() {
    spinner.stop();
    $('#logo').css('visibility', 'visible');
});
var SETS_PER_PAGE = 61;
var xhr = undefined;
function getSets(data, callback)
{
    if (xhr)
    {
        return;
    }
    xhr = $.getJSON(location.pathname + '?mod=json', data).done(function(sets)
    {
        for (var i = 0; i < sets.length; i++)
        {
            var length = 0;
            var bpm    = 0;
            var modes  = [];
            for (var j = 0; j < sets[i].beatmaps.length; j++)
            {
                length   = Math.max(length, sets[i].beatmaps[j].length);
                bpm      = Math.max(bpm, sets[i].beatmaps[j].bpm);
                modes[j] = sets[i].beatmaps[j].mode;
            }
            sets[i].length = length;
            sets[i].bpm    = bpm;
            sets[i].modes  = modes.unique();

            sets[i].opened = '';
            sets[i].downloads = sets[i].downloads || null;
            sets[i].status = [ '', 'r', 'a', 'q', 'l' ][sets[i].status];

            sets[i].beatmaps.sort(function (a, b) {
                return a.star - b.star;
            });
        }
        callback(sets);
    }).fail(function(e)
    {
        if (e.statusText != 'abort')
        {
            alert('데이터를 로드할 수 없습니다. 다시 시도해주세요.');
        }
    }).always(function(e)
    {
        xhr = undefined;
    });
}
function renderSets(sets, dest, flush)
{
    $('.nojs').removeClass('nojs');
    if (!sets)
    {
        return;
    }
    if (!sets.length && initUploader())
    {
        return;
    }
    var style = tool.get('style', 'mid');
    var dst = $(dest || '.sets').removeClass('big').removeClass('mid').removeClass('off');
    if (!dst.masonried && style === 'mid') {
        // dst.masonry({ horizontalOrder: true });
        dst.masonried = 1;
    }

    var setTpl = TrimPath.parseDOMTemplate(style),
        // DataCloneError occurs at history.replaceState
        // html = set.map(setTpl.process);
        html = $.extend(true, [], sets).map(setTpl.process);
    if (flush)
    {
        dst.html('')//.masonry('destroy');
        if (style === 'mid') {
            // dst.masonry({ horizontalOrder: true });
        }
    }
    var $items = $(html.join(''));
    if (style === 'mid') {
        dst.addClass(style).append($items)//.masonry('appended', $items).masonry('layout');
    }
    else {
        dst.addClass(style).append($items);
    }

    if (!player.paused)
    {
        var id = player.curId();
        $('.playback', $('.id', dst).filter(function()
            {
                return $(this).text() === id;
            }).closest('.set')
        ).addClass('p');
    }
}

$('label [tabindex]').on('keydown', function(e)
{
    var label = $(this).closest('label');
    if (e.keyCode == 13 ||
        (e.keyCode == 27 && $('#' + label.prop('for')).prop('checked')))
    {
        e.preventDefault();
        label.click();
    }
});
$('[id^=toggle-] + *').on('keydown', function(e)
{
    if (e.keyCode == 27)
    {
        e.preventDefault();
        var label = $('[for^=' + $(this).prev().prop('id') + ']');
        label.click();
        $('[tabindex]', label).focus();
    }
});



/**
 * Setup
 */
var setup = {
    updateBGField: function()
    {
        $('#setup fieldset').prop('disabled', !$('#setup [name=bg_mod]').prop('checked'));
    },
    indicate: function(flag)
    {
        var state = flag ? 'success' : 'fail';
        $('#setup .title').addClass(state);
        setTimeout(function()
        {
            $('#setup .title').removeClass(state);
        }, 900);
    },
};

$('#setup [name=bg_mod]').on('click', setup.updateBGField);
$('#setup [name=image]').on('change', function()
{
    var preview = $(this).prev(),
        reader = new FileReader();
    reader.onload = function()
    {
        preview.css('backgroundImage', 'url(' + this.result + ')');
    };
    reader.readAsDataURL(this.files[0]);
});
$('#setup [name=color]').on('change', function()
{
    $(this).prev().css('backgroundColor', this.value);
});
$('#setup').on('submit', function(e)
{
    e.preventDefault();
    $.ajax({
        type: 'POST',
        url: this.action,
        data: new FormData(this),
        processData: false,
        contentType: false,
    }).done(function()
    {
        setup.indicate(true);
    }).fail(function()
    {
        setup.indicate(false);
    });
});

setup.updateBGField();


/**
 * Tool
 */
var tool = {
    get: function(key, def)
    {
        return JSON.parse(localStorage['osu_tool'] || '{"' + key + '":"' + def + '"}')[key];
    },
    set: function()
    {
        var data = $('#tool').serializeObject();
        data.unicode = data.unicode === 'on';
        localStorage['osu_tool'] = JSON.stringify(data);
        $(window).trigger('popstate');
    },
};
var player = 'Audio' in window ? new Audio() : { src: '' };
player.setvol = function(param)
{
    player.volume = (param ?
        $('#tool [name=volume]').val() :
        tool.get('volume', 100)
    ) / 100;
};
player.curId = function()
{
    return (this.src.match(/\/\d+/) || []).join().slice(1);
};

$('#tool').on('change', tool.set);
$('#tool [name=volume]').on('change', player.setvol);

player.setvol();
$('#tool [name=volume]').val(player.volume * 100);
$('#tool [name=style][value=' + tool.get('style', 'mid') + ']').prop('checked', true);
$('#tool [name=unicode]').prop('checked', tool.get('unicode', false) | 0);
$('#tool input').prop('disabled', false);

$(document).on('click', '.set .playback', function(e)
{
    e.preventDefault();
    var id = $('.id', $(this).closest('.set')).text();
    if (player.paused || player.curId() != id)
    {
        $('.set .playback.p').removeClass('p');
        player.src = '//b.ppy.sh/preview/' + id + '.mp3';
        player.play();
        $(this).addClass('p');
    }
    else
    {
        player.pause();
    }
});
$(player).on('error pause ended', function()
{
    $('.set .playback.p').removeClass('p');
});
$(document).on('click', '.set a', function()
{
    player.pause();
});



$('#archive-toggle').on('click', function (e) {
    var on = $('html').toggleClass('archive').hasClass('archive')
    $('#archive').toggle(on)
    if (on) {
        $('#archive-total').text(0)
        $('.set').prepend('<div class="archive-selector"><i class="icon yes">check_circle</i><i class="icon no">check_circle_outline</i></div>')
    } else {
        $('.archive-selector').remove();
    }
})

$(document).on('click', '.archive-selector', function (e) {
    var yes = $(this).toggleClass('yes').hasClass('yes') || -1
    $('#archive-total').text(($('#archive-total').text() | 0) + yes)
})

$('#archive-select').on('click', function (e) {
    var all = $('.archive-selector')
    var yes = all.filter('.yes')
    // 전체 선택
    if (yes.length < all.length) {
        all.addClass('yes')
        $('#archive-total').text(all.length)
    } else {
        yes.removeClass('yes')
        $('#archive-total').text(0)
    }
})

$('#archive-get').on('click', function (e) {
    $('#archive-form')
        .empty()
        .append(
            $('.archive-selector.yes').closest('.set').find('.id').map(function (i, el) {
                return '<input type="hidden" name="set_ids[]" value="' + el.textContent + '"/>'
            }).toArray().join(''))
        .submit()
})



history.replaceState = history.replaceState || function(data, title, url) { return 1; };
history.pushState = history.pushState || function(data, title, url) { return 1; };

// //////////////////////////////////////////////////////////////////////////
// history.scrollRestoration = 'manual';

var keepOriginalUrlSearchParams = !location.search;

function getStateAsArray(state) {
    state = state || history.state;
    return $.isArray(state) ? state : [];
}
function isStateEmpty(state) {
    return getStateAsArray(state).length == 0;
}

/**
 * Search
 */
if ($('#search').length)
{

    $('#search #filter [type=radio]').prop('type', 'checkbox');
    // $('#search [name=c]').on('change', function() {
    //     $('#search [name=q]').focus();
    // });
    $('#filter legend').on('click', function (e) {
        e.preventDefault();
        $(e.target).toggleClass('expand');
    });
    var ftimer;
    $('#filter input').on('change', function (e) {
        clearTimeout(ftimer);
        ftimer = setTimeout(function () {
            $('#search')[0].p.value = -1;
            $('#search').submit();
        }, 300);
    });

    $('#search').on('submit', function(e)
    {
        e.preventDefault();
        var flush = !e.isTrigger || isStateEmpty() || this.p.value == -1;
        if (flush)
        {
            this.p.value = 1;
        }
        var data = $(this).serialize2([ 's', 'm', 'g', 'l' ]);
        getSets(data, function(sets)
        {
            $('#search [name=q]').blur();
            // console.log(data, flush);
            if (flush)
            {
                var url = [ location.pathname, data.replace(/&?p=\d*/, '') ].join('?') + location.hash;
                if (!history[isStateEmpty() ? 'replaceState' : 'pushState'](sets, null, keepOriginalUrlSearchParams ? null : url))
                {
                    $(window).scrollTop(0);
                }
                keepOriginalUrlSearchParams = false;
                player.pause();
            }
            else
            {
                history.replaceState(getStateAsArray().concat(sets), null);
            }

            renderSets(sets, null, flush);
            $('footer').html(sets.length == SETS_PER_PAGE ?
                TrimPath.processDOMTemplate('paging',
                {
                    query: data.replace(/(&?p=)(\d*)/, function(s, p, d)
                    {
                        return [ p, (d || 1) * 1 + 1 ].join('');
                    })
                }) : '');
        });
    });
    $(window).on('popstate', function(e)
    {
        var data = location.search.slice(1),
            sets = getStateAsArray((e.originalEvent || history).state);

        // 초기화
        $('#search').deserialize('q=&c=b&p=' + ~~(sets.length / SETS_PER_PAGE))
            .find('[type=checkbox]:not([id^=toggle-])').prop('checked', false);

        $('#search').deserialize2(data, [ 's', 'm', 'g', 'l' ]);

        data = $('#search').serialize2([ 's', 'm', 'g', 'l' ]);

        player.pause();
        renderSets(sets, null, true);
        $('footer').html(sets.length % SETS_PER_PAGE == 0 && sets.length ?
            TrimPath.processDOMTemplate('paging',
            {
                query: data.replace(/(&?p=)(\d*)/, function(s, p, d)
                {
                    return [ p, (d || 1) * 1 + 1].join('');
                })
            }) : '');
    });
    if (!isStateEmpty())
    {
        $(window).trigger('popstate');
    }
    else
    {
        $('#search')
            .deserialize2(location.search.slice(1), [ 's', 'm', 'g', 'l' ])
            .submit();
    }
    $(document).on('keydown', function(e)
    {
        // 데이터 갱신(F5)
        if (e.keyCode == 116)
        {
            e.preventDefault();
            history.replaceState(null, null);
            $('#search').submit();
        }
    });
    $(document).on('click', 'main a, footer a', function(e)
    {
        if (/^\?/.test($(this).attr('href')))
        {
            e.preventDefault();

            // 초기화
            $('#search').deserialize('q=&c=b&p=' + ($(this).closest('main') ? -1 : 1))
                .find('[type=checkbox]:not([id^=toggle-])').prop('checked', false);

            var data = $(this).attr('href').slice(1);

            // 적용
            $('#search').deserialize2(data, [ 's', 'm', 'g', 'l' ]).submit();
        }
    });
    // 자동 로드
    $(window).on('scroll', function(e)
    {
        if ($('.sets').height() - $(window).scrollTop() < $(window).height())
        {
            $('footer a').click();
        }
    });

    // $('#search [type=reset]').on('click', function(e)
    // {
    //     e.preventDefault();
    //     $('#search [name=q]').val('').focus();
    // });


}


/**
 * Popular
 */
if ($('#period').length)
{
    $('.sets').css({ counterReset: 'rank 0' });
    $('#period').on('submit', function(e)
    {
        e.preventDefault();
        var flush = !e.isTrigger || isStateEmpty();
        if (flush)
        {
            this.p.value = 1;
        }
        var data = $(this).serialize();
        getSets(data, function(sets)
        {
            if (flush)
            {
                var url = [ location.pathname, data.replace(/&?p=\d*/, '') ].join('?') + location.hash;
                if (!history[isStateEmpty() ? 'replaceState' : 'pushState'](sets, null, url))
                {
                    $(window).scrollTop(0);
                }
                player.pause();
            }
            else
            {
                history.replaceState(getStateAsArray().concat(sets), null);
            }

            renderSets(sets, null, flush);
            $('footer').html(sets.length == SETS_PER_PAGE ?
                TrimPath.processDOMTemplate('paging',
                {
                    query: data.replace(/(&?p=)(\d*)/, function(s, p, d)
                    {
                        var page = (d || 1) * 1;
                        // $('.sets').css({ counterReset: 'rank ' + (page - 1) * SETS_PER_PAGE });
                        return [ p, page + 1].join('');
                    })
                }) : '');
        });
    });
    $(window).on('popstate', function(e)
    {
        var data = location.search.slice(1),
            sets = getStateAsArray((e.originalEvent || history).state);

        $('#period').deserialize(data)[0].p.value = (sets.length / SETS_PER_PAGE) | 0;
        data = $('#period').serialize();

        player.pause();
        renderSets(sets, null, true);
        $('footer').html(sets.length % SETS_PER_PAGE == 0 && sets.length ?
            TrimPath.processDOMTemplate('paging',
            {
                query: data.replace(/(&?p=)(\d*)/, function(s, p, d)
                {
                    var page = (d || 1) * 1;
                    // $('.sets').css({ counterReset: 'rank ' + (page - 1) * SETS_PER_PAGE });
                    return [ p, page + 1].join('');
                }),
            }) : '');
    });
    if (!isStateEmpty())
    {
        $(window).trigger('popstate');
    }
    else
    {
        $('#period').submit();
    }
    $(document).on('keydown', function(e)
    {
        if (e.keyCode == 116)
        {
            e.preventDefault();
            history.replaceState(null, null);
            $('#period').submit();
        }
    });
    $(document).on('click', 'footer a', function(e)
    {
        if (/^\?/.test($(this).attr('href')))
        {
            e.preventDefault();
            // $('select[name=q]', '#period').val(1);
            $('#period').deserialize($(this).attr('href').slice(1)).submit();
        }
    });
    // 자동 로드
    $(window).on('scroll', function(e)
    {
        if ($('.sets').height() - $(window).scrollTop() < $(window).height())
        {
            $('footer a').click();
        }
    });
    $('#period .macro').on('change', function()
    {
        var s, e = new Date();
        switch (this.value * 1)
        {
            case 1:
            {
                s = e;
                break;
            }
            case 2:
            {
                s = new Date(e.setDate(e.getDate() - 1));
                break;
            }
            case 3:
            {
                s = new Date(e.setDate(e.getDate() - e.getDay()));
                s.setDate(s.getDate() - 7);
                break;
            }
            case 4:
            {
                s = new Date(e.setDate(0));
                s.setDate(1);
                break;
            }
            case 5:
            {
                s = new Date(e.setDate(e.getDate() - 1));
                s.setDate(s.getDate() - 7);
                break;
            }
            case 6:
            {
                s = new Date(e.setDate(e.getDate() - 1));
                s.setDate(s.getDate() - 30);
                break;
            }
        }
        if (s !== undefined)
        {
            $('#period [name=s]').val(s.toJSON().split('T')[0]);
            $('#period [name=e]').val(e.toJSON().split('T')[0]);
        }
        this.value = 0;
    });
}


/**
 * Pack, Info
 */
if ($('.accordion').length)
{
    $(document).on('click', '.accordion > div > .title', function(e)
    {
        if ($(e.target).is('a'))
        {
            return;
        }

        e.preventDefault();
        var tooth = $(this).parent();
        var position = tooth.offset().top;
        if (!tooth.hasClass('folded') && $(window).scrollTop() - position + 40 > 0)
        {
            $(window).scrollTop(position - 40);
        }
        tooth.toggleClass('folded');
    });
    $(document).on('keydown', '.accordion > div > .title', function(e)
    {
        if (e.keyCode == 13)
        {
            e.preventDefault();
            $(this).click();
        }
    });
    $('.accordion > div:not(.folded)').addClass('folded');
    var packs = [];
    $(document).on('click', '.pack > .title', function(e)
    {
        if ($(e.target).is('a'))
        {
            return;
        }

        e.preventDefault();
        var id = $('a', this).attr('href').split('/')[1],
            self = $(this);
        if (!self.data('sets'))
        {
            getSets({ n: id }, function(sets)
            {
                self.data('sets', sets);
                renderSets(sets, self.next(), true);
                packs.push(self);
            });
        }
        else
        {
            renderSets(self.data('sets'), self.next(), true);
        }
    });
    $(window).on('popstate', function(e)
    {
        if (e.isTrigger)
        {
            for (var i = 0; i < packs.length; i++)
            {
                renderSets(packs[i].data('sets'), packs[i].next(), true);
            }
        }
    });
}


/**
 * Set
 */
$(document).on('click', '.set button.mode', function(e)
{
    e.preventDefault();
    var target = $(this).closest('.set').toggleClass('d');
    var id = $('.id', target).text();

    // will be triggered in index, popular
    if (!isStateEmpty())
    {
        var sets = history.state.map(function(set)
        {
            if (set.id == id)
            {
                set.opened = target.hasClass('d') ? 'd' : '';
            }
            return set;
        });
        history.replaceState(sets, null);
    }
    if (tool.get('style', 'mid') === 'mid') {
        // $('.sets').masonry();
    }
});

var preview = null;
$(document).on('click', '.mode a', function(e) {
    e.preventDefault();
    if (preview == null || preview.closed)
    {
        var h = 680;
        var w = h / 3 * 4;
        preview = window.open(this.href, 'preview', [
            'width=' + w,
            'height=' + h,
            'top=' + (screen.height - h) / 2,
            'left=' + (screen.width - w) / 2
        ].join(','));
    }
    else
    {
        preview.location.href = this;
    }
    preview.focus();
});
